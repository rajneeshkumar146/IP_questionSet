package InternshipQuestionGraph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

public class Minimize_Malware_Spread_II {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[][] graph = { { 1, 1, 0, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 0, 0, 1, 0, 0, 0, 0, 0 },
				{ 0, 0, 1, 0, 0, 1, 0, 1, 0, 0 }, { 1, 0, 0, 1, 0, 0, 1, 0, 1, 0 }, { 0, 1, 0, 0, 1, 0, 1, 0, 0, 0 },
				{ 0, 0, 1, 0, 0, 1, 0, 1, 0, 0 }, { 0, 0, 0, 1, 1, 0, 1, 0, 0, 0 }, { 0, 0, 1, 0, 0, 1, 0, 1, 0, 0 },
				{ 0, 0, 0, 1, 0, 0, 0, 0, 1, 1 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 } };

		int[] initial = { 1, 5, 3 };
		System.out.println(minMalwareSpread(graph, initial));
	}

	public static int minMalwareSpread(int[][] graph, int[] initial) {

		int n = graph.length;

		// marking not inital vtxes;

		int markNinivtx[] = new int[n];
		Arrays.fill(markNinivtx, 1);
		for (int v : initial)
			markNinivtx[v] = 0;

		// finding initial vtxes from which vtxes are infected

		ArrayList<Integer>[] infectedBy = new ArrayList[n];
		for (int v = 0; v < n; v++)
			infectedBy[v] = new ArrayList<>();

		// Applying DFS to find Connected Vtxes to inivtxes

		for (int u : initial) {
			Set<Integer> seen = new HashSet<Integer>();
			DFS(graph, u, seen, markNinivtx);
			for (int v : seen)
				infectedBy[v].add(u);
		}

		// count the contribution of each u independently

		int contribution[] = new int[n];
		for (int v = 0; v < graph.length; v++) {
			if (infectedBy[v].size() == 1)
				contribution[infectedBy[v].get(0)]++;
		}

		// Finding Ans

		Arrays.sort(initial);
		int ans = initial[0];
		int ansSize = -1;
		for (int u : initial) {
			int score = contribution[u];
			if (score > ansSize || score == ansSize && u < ans) {
				ans = u;
				ansSize = score;
			}
		}
		return ans;
	}

	private static void DFS(int[][] graph, int u, Set<Integer> seen, int[] markNinivtx) {

		for (int v = 0; v < graph.length; v++)
			if (graph[u][v] == 1 && markNinivtx[v] == 1 && !seen.contains(v)) {
				seen.add(v);
				DFS(graph, v, seen, markNinivtx);
			}
	}
}
