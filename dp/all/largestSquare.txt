import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main (String[] args) {
   	 //code
   	 Scanner sc=new Scanner(System.in);
   	 int T=sc.nextInt();
   	 while(T>0){
   	 	T--;
   	 	int R=sc.nextInt();
   	 	int C=sc.nextInt();
   	 	int[][] M=new int[R][C];
   	 	for(int i=0;i<R;i++){
   	     	for(int j=0;j<C;j++){
   	         	M[i][j]=sc.nextInt();
   	     	}
   	 	}
   	 	System.out.println(largestSquare(M));
   	 }
    
    public static int largestSquare(int[][] M){
    	int R=M.length, C=M[0].length;
    	int ans=0;
    // stores the length of side of the largest square formed from top left upto (i, j)  including (i, j)
    	int[][] dp=new int[R][C];
    	for(int i=0;i<R;i++){
        	for(int j=0;j<C;j++){
            	if(i==0 || j==0)dp[i][j]=M[i][j];
            	else if(M[i][j]!=0){
		// Only squares which are just above, just left, or just in left diagonal can contribute
                	dp[i][j]=Math.min(dp[i-1][j], Math.min(dp[i-1][j-1], dp[i][j-1]))+1;
            	}
            	ans=Math.max(ans, dp[i][j]);
        	}
    	}
    	return ans;
    
}
