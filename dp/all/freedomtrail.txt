class Solution {
	public int findRotateSteps(String ring, String key) {
     	int n = ring.length();
    	int m = key.length();
    	int[][] dp = new int[m + 1][n];
    	// dp[i][j] represents best way to spell the key[i, end] with ring.charAt(j) as initial state on the ring
    	for (int i = m - 1; i >= 0; i--) {
        	for (int j = 0; j < n; j++) {
            	dp[i][j] = Integer.MAX_VALUE;
            	for (int k = 0; k < n; k++) {
                	if (ring.charAt(k) == key.charAt(i)) {
                    	int diff = Math.abs(j - k);
                    	//best way to reach key[i] from current char in the ring (ring.charAt(j))
                    	int step = Math.min(diff, n - diff);
                    	dp[i][j] = Math.min(dp[i][j], step + dp[i + 1][k]);
                	}
            	}
        	}
    	}
   	 
    	return dp[0][0] + m;// spelling each character is also a move
	}
    
}
