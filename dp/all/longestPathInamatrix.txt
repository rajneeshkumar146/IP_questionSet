import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
    public static void main (String[] args) {
   	 //code
   	 Scanner sc=new Scanner(System.in);
   	 int T=sc.nextInt();
   	 while(T>0){
   	 	T--;
   	 	int N=sc.nextInt();
   	 	int[][] A=new int[N][N];
   	 	for(int i=0;i<A.length;i++)
   	     	for(int j=0;j<A[0].length;j++)
   	         	A[i][j]=sc.nextInt();
   	 	System.out.println(longestPathMatrix(A));
   	 }
    
    public static int longestPathMatrix(int[][] A){
    	int ans=0;
    	int[][] dp=new int[A.length][A[0].length];
    	for(int i=0;i<dp.length;i++)Arrays.fill(dp[i], -1);
    	for(int i=0;i<dp.length;i++){
        	for(int j=0;j<dp[0].length;j++){
            	ans=Math.max(ans, helper(dp, A, i, j));
        	}
    	}
    	return ans+1;
    
    public static int helper(int[][] dp, int[][] A, int i, int j){
    	if(dp[i][j]!=-1)return dp[i][j];
   	 
    	dp[i][j]=0;
    	if(i-1>=0 && A[i-1][j]==A[i][j]+1){
        	dp[i][j]=helper(dp, A, i-1, j)+1;
    	}
    	if(j+1<=A[0].length-1 && A[i][j+1]==A[i][j]+1){
        	dp[i][j]=Math.max(dp[i][j], helper(dp, A, i, j+1)+1);
    	}
    	if(i+1<=A.length-1 && A[i+1][j]==A[i][j]+1){
        	dp[i][j]=Math.max(dp[i][j], helper(dp, A, i+1, j)+1);
    	}
    	if(j-1>=0 && A[i][j-1]==A[i][j]+1){
        	dp[i][j]=Math.max(dp[i][j], helper(dp, A, i, j-1)+1);
    	}
    	return dp[i][j];
    
}
