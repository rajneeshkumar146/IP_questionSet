--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. You are given the root node of a binary tree.
2. Traverse it in post-order but via iteration. You can use two stacks.
3. Print nodes as space-separated integers on a single line.

Notes
1. Node class represents the node of binary tree.
2. display is a utility function which displays the contents of tree, feel free to use it for
debugging purposes.
3. main takes input from the users and creates the tree. You can use display to know its contents.
4. You should code only the solve function, feel free to change its signature if required.
5. Don't change the code of Node, main and display.
6. Make sure not to use recursion.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/iterative-postorder-traversal/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Use two stacks - process and result.
2. Remove from process and add to result stack.
3. Add left and right child to process stack.

Why it works?
1. Node takes first service and gets embedded in the stack at the bottom.
2. Out of left and right, right takes first service therefore it goes above node
in the result stack. Also, it's family will then go in the process stack and
subsequently into result stack.
3. Finally left takes service and goes on the top of right in result stack. It's
family goes in the process stack and at the top of left in result stack.
4. What gets done in the result stack is
node >> right >> right's family >> left >> left's family
5. Result stack, being a stack gets printed in reverse
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.binaryTree;

import java.util.LinkedList;
import java.util.Scanner;

public class Pep_JavaIP_10BinaryTrees_317IterativePostorder {
	private static class Node {
		int data;
		Node left;
		Node right;

		Node(int data, Node left, Node right) {
			this.data = data;
			this.left = left;
			this.right = right;
		}
	}

	public static void display(Node node) {
		if (node == null) {
			return;
		}

		String str = "";

		str += node.left == null ? "." : node.left.data;
		str += " => " + node.data + " <= ";
		str += node.right == null ? "." : node.right.data;

		System.out.println(str);

		display(node.left);
		display(node.right);
	}

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		int[] arr = new int[scn.nextInt()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}

		Node[] nodes = new Node[arr.length];
		for (int i = 0; i < nodes.length; i++) {
			if (arr[i] != -1) {
				nodes[i] = new Node(arr[i], null, null);

				if (i > 0) {
					int pi = (i - 1) / 2;

					if (i == 2 * pi + 1) {
						nodes[pi].left = nodes[i];
					} else {
						nodes[pi].right = nodes[i];
					}
				}
			}
		}

		solve(nodes[0]);
	}

	private static void solve(Node root){
		// a process stack and results stack
		LinkedList<Node> processStack = new LinkedList<>();
		LinkedList<Integer> resultStack = new LinkedList<>();

		processStack.addFirst(root);
		while(processStack.size() > 0){
			// remove from process stack and add to result stack
			Node temp = processStack.removeFirst();
			resultStack.addFirst(temp.data);

			// add the children to process stack
			if(temp.left != null){
				processStack.addFirst(temp.left);
			}

			if(temp.right != null){
				processStack.addFirst(temp.right);
			}
		}

		while(resultStack.size() > 0){
			System.out.print(resultStack.removeFirst() + " ");
		}
	}

}
