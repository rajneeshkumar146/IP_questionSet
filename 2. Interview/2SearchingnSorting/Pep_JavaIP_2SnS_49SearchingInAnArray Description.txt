--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. You are given an array of integers. You are also given an element to be searched.
2. You are also given an integer k. The adjacent elements differ atmost 
by difference of k.
3. We have to print the value of index if it is found, otherwise -1.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/searching-array-adjacent-differ-k/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Iss question mai humme yeh pata h ki joh element hum search kar rhe, woh minimum
kitni duur ho skta h arr[i] se.
2. Lets suppose : arr[i] 10 h aur elementto be searched 25 and k is 10.
toh 10 ke adjacent element toh 0 to 20 ke beech mai lie karega. 25 minimum 2 element
duur hoga 10 se. isliye hum 2 ka jump karenge.
3. Jump factor= Math.abs(arr[i]-elementtobesearched)/k hoga.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package SearchingSorting;

import java.util.Scanner;

public class Pep_JavaIP_2SnS_49SearchingInAnArray {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		int[] arr = new int[scn.nextInt()];
		for (int i1 = 0; i1 < arr.length; i1++) {
			arr[i1] = scn.nextInt();
		}
		int ElementToBeSearched = scn.nextInt();
		int k = scn.nextInt();
		int i = searchinsortedarray(arr, ElementToBeSearched, k);

		String result = (i != -1) ? i + "" : "Number is not present";
		System.out.println(result);
	}

	private static int searchinsortedarray(int[] arr, int ElementToBeSearched, int k) {

		int i = 0;
		while (i < arr.length) {
			if (arr[i] == ElementToBeSearched) {
				return i;
			}

			i = i + Math.max(1, Math.abs(arr[i] - ElementToBeSearched) / k);
		}

		return -1;

	}

}
