--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. Take as input N, row * col of a 2-d array.
2. Take N * N integers as input
3. Make a selection of elements from the 2-d array, by selecting an element from
each row. The element selected from ith row should be smaller than element
selected from i + 1th row. Out of all the possible selections, chose the
selection of elements which has maximum sum of elements.
4. Print the maximum sum thus found.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.codechef.com/problems/MAXSC
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Sort all 1-d arrays.
2. Keep a hashmap with pointers pointing to last elements of all 1-d arrays.
3. Chose the last element of last array.
4. Try to best possible (last valid) selection from each lower array.
5. Print the sum thus produced (it'll be maximum).
6. If we fail in making selections beyond a point, return -1.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.arrays;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Scanner;

public class Pep_JavaIP_1Arrays_43MaxScoreCodeChef {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		int n = scn.nextInt();
		int[][] arr = new int[n][n];
		for (int i = 0; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; j++) {
				arr[i][j] = scn.nextInt();
			}
			Arrays.sort(arr[i]);
		}

		System.out.println(solve(arr));
	}

	private static long solve(int[][] arr) {
		// pointers for all arrays are pointing to ends
		HashMap<Integer, Integer> pointers = new HashMap<>();
		for (int i = 0; i < arr.length; i++) {
			pointers.put(i, arr.length - 1);
		}

		long res = arr[arr.length - 1][pointers.get(arr.length - 1)];
		int i = arr.length - 2;
		while (i >= 0) {
			// pick an element from lower array only if it is smaller than
			// element of higher array
			while (arr[i][pointers.get(i)] >= arr[i + 1][pointers.get(i + 1)]) {
				if (pointers.get(i) > 0) {
					pointers.put(i, pointers.get(i) - 1);
				} else {
					// run out of valid elements
					return -1;
				}
			}

			// item selected
			res += arr[i][pointers.get(i)];
			i--;
		}

		return res;
	}

}
