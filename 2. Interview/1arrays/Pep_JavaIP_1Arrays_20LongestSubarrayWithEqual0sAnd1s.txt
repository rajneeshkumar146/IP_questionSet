--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
You are given an array. Find and print the longest subarray with equal number of
0s and 1s. If there is no such subarray print "Not Found". If there are two
such subarrays of equal length, print the one coming later.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/largest-subarray-with-equal-number-of-0s-and-1s/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Maintain a hashmap (using positive and negative maps).
2. Every time a 0 comes do a val-- and for every 1 do a val++.
3. Largest subarray with equal 0s and 1s lies between equal values of val.
4. When a val reoccurs, check distance from old occurence and update osp, oep.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.arrays;

import java.util.Scanner;

public class Pep_JavaIP_1Arrays_20LongestSubarrayWithEqual0sAnd1s {

	public static void main(String[] args) {
		// Geeks
		/*
		Scanner scn = new Scanner(System.in);
		int t = scn.nextInt();

		while (t-- > 0) {
			int[] arr = new int[scn.nextInt()];
			for (int i = 0; i < arr.length; i++) {
				arr[i] = scn.nextInt();
			}

			System.out.println(solve(arr));
		}
		*/

		// Hackerrank
		Scanner scn = new Scanner(System.in);
		int[] arr = new int[scn.nextInt()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}

		solve(arr);
	}

	private static int solve(int[] arr) {
		Integer[] posmap = new Integer[arr.length + 1];
		Integer[] negmap = new Integer[arr.length + 1];
		posmap[0] = -1;

		int val = 0;
		int osp = 0;
		int oep = 0;

		for (int i = 0; i < arr.length; i++) {
			if (arr[i] == 0) {
				val--;
			} else if (arr[i] == 1) {
				val++;
			}

			if (val >= 0) {
				if (posmap[val] != null) {
					if (i - posmap[val] > oep - osp) {
						osp = posmap[val] + 1;
						oep = i;
					}
				} else {
					posmap[val] = i;
				}
			} else {
				val = -val;
				if (negmap[val] != null) {
					if (i - negmap[val] > oep - osp) {
						osp = negmap[val] + 1;
						oep = i;
					}
				} else {
					negmap[val] = i;
				}
				val = -val;
			}
		}

		if (oep != osp) {
			for(int i = osp; i <= oep; i++){
				System.out.print(arr[i] + " ");
			}
			return oep - osp + 1;
		} else {
			System.out.println("Not Found");
			return 0;
		}
	}

}
