--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. You are given an array of integers and an integer K. You have to print the 
largest subarray sum possible using atleast K numbers.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/largest-sum-subarray-least-k-numbers/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. This is extension of kadanes and can be solved sliding window concept.
2. First we will make kadanes array, where at ith index we will store the maximum
sum subarray that is possible in array elements on indices [0,i].
3. Then we will slide a window of size k. First we will calculate sum of first
k numbers and store it in overallmax.
4. Then we will slide by k by acquiring next element of the array and removing
last element of previous window. Thus, sumofK gets updated. We will update 
overallmax and fight would be between 3 : kadanes[i-1]+sumofK, sumofK, overallmax
5. Overallmax after the loop traversal is our answer.  
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package Arrays;

import java.util.Scanner;

public class Pep_JavaIP_31LargestSubarraySumwithAtleastK {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);

		int[] arr = new int[scn.nextInt()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}

		int k = scn.nextInt();
		// generate kadanes array
		int[] kadanesarray = solveusingkadanes(arr, k);

		// generate a window of k elements
		int sumofK = arr[0];
		for (int i = 1; i < k; i++) {
			sumofK += arr[i];
		}

		// traverse window and update overallmax
		int overallmax = sumofK;
		for (int i = k; i < arr.length; i++) {
			sumofK += arr[i] - arr[i - k];

			overallmax = Math.max(kadanesarray[i - k] + sumofK, Math.max(sumofK, overallmax));

		}
		System.out.println(overallmax);
	}

	private static int[] solveusingkadanes(int[] arr, int k) {
		int[] kadanesarray = new int[arr.length];
		int currmax = arr[0];
		kadanesarray[0] = arr[0];
		for (int i = 1; i < arr.length; i++) {
			currmax = Math.max(currmax + arr[i], arr[i]);
			kadanesarray[i] = currmax;

		}

		return kadanesarray;
	}

}