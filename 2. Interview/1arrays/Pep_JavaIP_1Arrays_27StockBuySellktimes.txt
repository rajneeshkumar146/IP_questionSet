--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
Given an array, where A(i) represents stock prices on ith day. Transactions means
buying and selling a stock. We are allowed to make at most 'k' transactions. We 
have to print maximum profit that can be generated by buying and selling the stock
at most k times. 
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/maximum-profit-by-buying-and-selling-a-share-at-
most-k-times/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. We will solve this question by using dynamic programming technique.
2. We will make an 2D-array where rows represent transactions from 0 to k and
column represent stock prices. 
3. Here, 2D-array[i][j] represents maximum profit that can be generated by selling 
and buying stock at most i times and such that we are provided stock data from 
0 to j.
4. Now 0th row and 0th column will be populated with zeroes as maximum profit that 
can be generated will be zero.
5. For any generic point:
	2D-array[i][j] will be equal to max of either 2D-array[i-1][j]
or max of (for(m=0 to j-1) -> A[j]-A[m]+2d-array[i-1][m].
6. We would return 2D-array[k][A.length-1].
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package Arrays;

import java.util.Scanner;

public class Pep_JavaIP_1Arrays_27StockBuySellktimes {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		/*//Geeks
		int t = scn.nextInt();
		for (int not = 0; not < t; not++) {

			int k = scn.nextInt();
			int[] arr = new int[scn.nextInt()];
			for (int i = 0; i < arr.length; i++) {
				arr[i] = scn.nextInt();
			}
			System.out.println(solve(arr, k));
		}
*/	
		//Hackerrank
		int k = scn.nextInt();
		int[] arr = new int[scn.nextInt()];
		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}
		System.out.println(solve(arr, k));
	}

	public static int solve(int[] arr, int k) {
		int[][] maxprofit = new int[k + 1][arr.length];

		for (int i = 1; i < maxprofit.length; i++) {
			for (int j = 1; j < maxprofit[0].length; j++) {
				int f1 = maxprofit[i][j - 1];

				int max = Integer.MIN_VALUE;
				for (int k1 = 0; k1 < j; k1++) {
					int f2 = arr[j] - arr[k1] + maxprofit[i - 1][k1];
					if (f2 > max) {
						max = f2;
					}
				}

				maxprofit[i][j] = Math.max(f1, max);
			}
		}

		return maxprofit[k][arr.length - 1];
	}

}
