--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
You are given an array and two number lowVal and highVal. Rearrange the items of
array such that all items smaller than lowVal come first, items from lowVal to
highVal follow the first set of elements and items larger than highVal appear at
the last.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
Yahoo
https://www.geeksforgeeks.org/three-way-partitioning-of-an-array-around-a-given-range/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Dutch national flag
2. Use lo, mid and high to segregate
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.arrays;

import java.util.Scanner;

public class Pep_JavaIP_1Arrays_18ThreeWayPartitioning {

	public static void main(String[] args) {
		// Hackerrank
		Scanner scn = new Scanner(System.in);
		int[] arr = new int[scn.nextInt()];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}

		int lv = scn.nextInt();
		int hv = scn.nextInt();

		solve(arr, lv, hv);

	}

	// 12, 1 5 6 21 25 26 40 15 18 19 41 10, 10 20 -> 1 5 6 10 19 18 15 40 26 41 25 21
	// 8, 1 5 4 -1 6 8 10 -9, 5 8 -> 1 4 -1 -9 6 8 5 10
	// 5, 1 10 4 5 6, 4 4 -> 1 4 5 6 10
	private static void solve(int[] arr, int lv, int hv) {
		int lo = 0;
		int mid = 0;
		int hi = arr.length - 1;

		// 1. 0 to lo - 1 is smallest elements
		// 2. lo to mid - 1 is in-between elements
		// 3. mid to hi is unkown area
		// 4. arr.length - 1 to hi + 1 is largest elements
		while (mid <= hi) {
			if (arr[mid] < lv) {
				swap(arr, lo, mid);
				lo++;
				mid++;
			} else if (arr[mid] >= lv && arr[mid] <= hv) {
				mid++;
			} else {
				swap(arr, mid, hi);
				hi--;
			}
		}

		for (int val : arr) {
			System.out.print(val + " ");
		}
	}

	private static void swap(int[] arr, int i, int j) {
		int temp = arr[i];
		arr[i] = arr[j];
		arr[j] = temp;
	}
}
