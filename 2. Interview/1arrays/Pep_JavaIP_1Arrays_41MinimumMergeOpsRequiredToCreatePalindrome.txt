--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. Take as input N, number of elements in array.
2. Take N inputs - Ai - as elements of array A.
3. Print the minimum merge operations required to make array a palindrome.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/find-minimum-number-of-merge-operations-to-make-an-array-palindrome/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. For an array to be palindrome, extremities must be equal and inner area must
be a palindrome.
2. If left and right are equal, the minimum number of merge operations will be
same as inner area i.e. left + 1 to right - 1.
3. If left is smaller, make a merge there.
4. If right is smaller, make a merge there.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.arrays;

import java.util.Scanner;

public class Pep_JavaIP_1Arrays_41MinimumMergeOpsRequiredToCreatePalindrome {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int[] arr = new int[scn.nextInt()];

		for (int i = 0; i < arr.length; i++) {
			arr[i] = scn.nextInt();
		}

		System.out.println(solve(arr));
	}

	private static int solve(int[] arr) {
		int res = 0;

		int left = 0;
		int right = arr.length - 1;

		while (left < right) {
			if (arr[left] < arr[right]) {
				// left is smaller, to make it a palindrome, attack left side by merging
				left++;
				arr[left] += arr[left - 1];

				res++;
			} else if (arr[left] > arr[right]) {
				// right is smaller, to make it a palindrome, attack right side by merging
				right--;
				arr[right] += arr[right + 1];

				res++;
			} else {
				// extremities are equal, proceed to internal area
				left++;
				right--;
			}
		}

		return res;
	}

}
