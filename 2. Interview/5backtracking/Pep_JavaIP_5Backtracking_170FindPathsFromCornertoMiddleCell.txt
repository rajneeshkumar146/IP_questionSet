--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
Given a square matrix containing positive integers, find all paths from any
any cell of first column to the middle cell. We can move exactly 'n' steps from
a cell in 4 directions i.e. North, East, West and South where 'n' is value of
the cell.
We can move to mat[i+n][j], mat[i-n][j], mat[i][j+n], and mat[i][j-n] from a
cell mat[i][j] where n is value of mat[i][j].

Note : To get same answer as the given expected output, please make calls in the
order : right, top, down and left.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/find-paths-from-corner-cell-to-middle-cell-in-maze
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Flood Fill variation
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package Backtracking;

import java.util.Scanner;

public class Pep_JavaIP_5Backtracking_170FindPathsFromCornertoMiddleCell {

	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int row = scn.nextInt();
		int col = scn.nextInt();
		int[][] arr = new int[row][col];
		for (int i = 0; i < row; i++) {
			for (int j = 0; j < col; j++) {
				arr[i][j] = scn.nextInt();
			}
		}

		boolean[][] visited = new boolean[arr.length][arr[0].length];
		for(int i=0; i<arr.length; i++) {
			findshortestsafepath(arr, i, 0, visited,"");
		}
	}

	private static void findshortestsafepath(int[][] arr, int row, int col, boolean[][] visited, String psf) {
		if (col == arr[0].length/2 && row==arr.length/2) {
			System.out.println(psf+"MID");
			return;
		}

		if (isunsafe(arr, row, col, visited)) {
			return;
		}
		// order of making calls : right, top, down, left
		visited[row][col] = true;
		findshortestsafepath(arr, row + arr[row][col], col, visited, psf+row+""+col+" ");// r
		findshortestsafepath(arr, row, col + arr[row][col], visited, psf+row+""+col+" ");// t
		findshortestsafepath(arr, row, col - arr[row][col], visited, psf+row+""+col+" ");// d
		findshortestsafepath(arr, row - arr[row][col], col, visited, psf+row+""+col+" ");// l
		visited[row][col] = false;
	}

	private static boolean isunsafe(int[][] arr, int row, int col, boolean[][] visited) {
		if (row < 0 || row >= arr.length || col < 0 || col >= arr[0].length || visited[row][col] == true) {
			return true;
		}
		return false;
	}
}
