--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. You are given an array and a integer k.
2. You are allowed a maximum of k consecutive swaps in the array. i.e. a[i] can
be swapped with immediate neighbors. Also, the upper limit on number of swaps is
k.
3. Rearrange the array, while honoring the limitations mentioned above, such
that we get smallest sequence of elements.

Notes
1. main handles the input and output.
2. You should code only the solve function, feel free to change its signature
if required.
3. Don't change the code of main and display.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/lexicographically-smallest-array-k-consecutive-swaps/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Attack the problem from left side of array.
2. Try to get the best possible candidate (least) for left-most spot of array
by traversing till k and finding the min.
3. Bubble up the min thus found to left-most spot. Use k's while bubbling.
4. If there are any more k's remaining, try to solve the second left-most spot
in array.
5. Continue, till k's are exhausted.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.greedy;

import java.util.Arrays;
import java.util.Scanner;

public class Pep_JavaIP_6Greedy_183LexicoSmallestArrayInKSwaps {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int[] arr = new int[scn.nextInt()];
		for(int i = 0; i < arr.length; i++){
			arr[i] = scn.nextInt();
		}
		int k = scn.nextInt();

		solve(arr, k);
		display(arr);
	}

	public static void solve(int[] arr, int k){
		int count = 0;

		// Try to get the best candidate for left-most spot first
		// second left-most sport then and so on..
		while(k > 0 && count < arr.length){
			int mini = count;
			// Find the smallest element till k
			for(int i = count + 1; i <= count + k && i < arr.length; i++){
				if(arr[i] < arr[mini]){
					mini = i;
				}
			}

			// bubble it up to the left-most spot of unsolved area
			// Use k's for bubbling up
			int temp = arr[mini];
			for(int i = mini; i > count; i--){
				arr[i] = arr[i - 1];
				k--;
			}
			arr[count] = temp;
			count++;
		}
	}

	private static void display(int[] arr){
		for(int val: arr){
			System.out.print(val + " ");
		}
		System.out.println(".");
	}
}
