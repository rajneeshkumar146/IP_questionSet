--------------------------------------------------------------------------------
Description
--------------------------------------------------------------------------------
1. You are given an array
2. You are to calculate the maximum height of a pyramid that you can create with
the elements of the array.
3. Number of elements and sum of elements on a lower level should both be
larger than number of elements and sum of elements on a higher level of pyramid

Notes
1. main handles the input and output.
2. You should code only the solve function, feel free to change its signature
if required.
3. Don't change the code of main.
--------------------------------------------------------------------------------
Source
--------------------------------------------------------------------------------
https://www.geeksforgeeks.org/rearrange-characters-string-no-two-adjacent/
--------------------------------------------------------------------------------
Important Information
--------------------------------------------------------------------------------
1. Build the pyramid greedily, top to bottom.
2. Put the smallest item on higher most level.
3. Next two on second level from top.
4. Next three on third level from top and so on.
5. Actually, the values or array are immaterial. Following is the sequence
of elements on each level
1 + 2 + 3 + .. + h - 1 + h = n.
6. Maximum height is the answer of above equation.
7. For maximum height, we started with least element and incremented the least.
8. We need not worry about sums, that can be managed by using the array in sorted
manner.
--------------------------------------------------------------------------------
Code
--------------------------------------------------------------------------------
package interview.greedy;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.PriorityQueue;
import java.util.Scanner;

import javax.print.DocFlavor.CHAR_ARRAY;

public class Pep_JavaIP_6Greedy_185MaxHeightPyramid {
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		int[] arr = new int[scn.nextInt()];
		for(int i = 0; i < arr.length; i++){
			arr[i] = scn.nextInt();
		}

		int res = solve(arr);
		System.out.println(res);
	}

	public static int solve(int[] arr){
		int res = 1;

		Arrays.sort(arr); // sorting to use smallest number first

		// building problem top-down

		int plc = 1; // previous level count
		int plv = arr[0]; // previous level value
		int clc = 0; // current level count
		int clv = 0; // current level value

		for(int i = 1; i < arr.length; i++){
			clc++;
			clv += arr[i];

			// if current level count and value has surpassed
			// previous level
			if(clc > plc && clv > plv){
				plc = clc;
				plv = clv;
				clc = 0;
				clv = 0;

				// level change
				res++;
			}
		}

		return res;
	}
}
